import { __extends } from "tslib";
import { StartInstanceRefreshAnswer, StartInstanceRefreshType } from "../models/models_0";
import { deserializeAws_queryStartInstanceRefreshCommand, serializeAws_queryStartInstanceRefreshCommand, } from "../protocols/Aws_query";
import { getSerdePlugin } from "@aws-sdk/middleware-serde";
import { Command as $Command } from "@aws-sdk/smithy-client";
/**
 * <p>Starts a new instance refresh operation, which triggers a rolling replacement of all
 *             previously launched instances in the Auto Scaling group with a new group of instances.</p>
 *         <p>If successful, this call creates a new instance refresh request with a unique ID that
 *             you can use to track its progress. To query its status, call the <a>DescribeInstanceRefreshes</a> API. To describe the instance refreshes that
 *             have already run, call the <a>DescribeInstanceRefreshes</a> API. To cancel an
 *             instance refresh operation in progress, use the <a>CancelInstanceRefresh</a>
 *             API. </p>
 *         <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-instance-refresh.html">Replacing Auto Scaling Instances
 *                 Based on an Instance Refresh</a>.</p>
 */
var StartInstanceRefreshCommand = /** @class */ (function (_super) {
    __extends(StartInstanceRefreshCommand, _super);
    // Start section: command_properties
    // End section: command_properties
    function StartInstanceRefreshCommand(input) {
        var _this = 
        // Start section: command_constructor
        _super.call(this) || this;
        _this.input = input;
        return _this;
        // End section: command_constructor
    }
    /**
     * @internal
     */
    StartInstanceRefreshCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "AutoScalingClient";
        var commandName = "StartInstanceRefreshCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: StartInstanceRefreshType.filterSensitiveLog,
            outputFilterSensitiveLog: StartInstanceRefreshAnswer.filterSensitiveLog,
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    StartInstanceRefreshCommand.prototype.serialize = function (input, context) {
        return serializeAws_queryStartInstanceRefreshCommand(input, context);
    };
    StartInstanceRefreshCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_queryStartInstanceRefreshCommand(output, context);
    };
    return StartInstanceRefreshCommand;
}($Command));
export { StartInstanceRefreshCommand };
//# sourceMappingURL=StartInstanceRefreshCommand.js.map