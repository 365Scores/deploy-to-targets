import { AutoScalingClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "../AutoScalingClient";
import { StartInstanceRefreshAnswer, StartInstanceRefreshType } from "../models/models_0";
import { Command as $Command } from "@aws-sdk/smithy-client";
import { Handler, MiddlewareStack, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer } from "@aws-sdk/types";
export declare type StartInstanceRefreshCommandInput = StartInstanceRefreshType;
export declare type StartInstanceRefreshCommandOutput = StartInstanceRefreshAnswer & __MetadataBearer;
/**
 * <p>Starts a new instance refresh operation, which triggers a rolling replacement of all
 *             previously launched instances in the Auto Scaling group with a new group of instances.</p>
 *         <p>If successful, this call creates a new instance refresh request with a unique ID that
 *             you can use to track its progress. To query its status, call the <a>DescribeInstanceRefreshes</a> API. To describe the instance refreshes that
 *             have already run, call the <a>DescribeInstanceRefreshes</a> API. To cancel an
 *             instance refresh operation in progress, use the <a>CancelInstanceRefresh</a>
 *             API. </p>
 *         <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-instance-refresh.html">Replacing Auto Scaling Instances
 *                 Based on an Instance Refresh</a>.</p>
 */
export declare class StartInstanceRefreshCommand extends $Command<StartInstanceRefreshCommandInput, StartInstanceRefreshCommandOutput, AutoScalingClientResolvedConfig> {
    readonly input: StartInstanceRefreshCommandInput;
    constructor(input: StartInstanceRefreshCommandInput);
    /**
     * @internal
     */
    resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AutoScalingClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartInstanceRefreshCommandInput, StartInstanceRefreshCommandOutput>;
    private serialize;
    private deserialize;
}
