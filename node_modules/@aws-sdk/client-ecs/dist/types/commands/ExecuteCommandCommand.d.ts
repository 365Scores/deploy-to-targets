import { ECSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "../ECSClient";
import { ExecuteCommandRequest, ExecuteCommandResponse } from "../models/models_0";
import { Command as $Command } from "@aws-sdk/smithy-client";
import { Handler, MiddlewareStack, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer } from "@aws-sdk/types";
export declare type ExecuteCommandCommandInput = ExecuteCommandRequest;
export declare type ExecuteCommandCommandOutput = ExecuteCommandResponse & __MetadataBearer;
/**
 * <p>Runs a command remotely on a container within a task.</p>
 */
export declare class ExecuteCommandCommand extends $Command<ExecuteCommandCommandInput, ExecuteCommandCommandOutput, ECSClientResolvedConfig> {
    readonly input: ExecuteCommandCommandInput;
    constructor(input: ExecuteCommandCommandInput);
    /**
     * @internal
     */
    resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ECSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ExecuteCommandCommandInput, ExecuteCommandCommandOutput>;
    private serialize;
    private deserialize;
}
