import { ECSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "../ECSClient";
import { DeleteClusterRequest, DeleteClusterResponse } from "../models/models_0";
import { Command as $Command } from "@aws-sdk/smithy-client";
import { Handler, MiddlewareStack, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer } from "@aws-sdk/types";
export declare type DeleteClusterCommandInput = DeleteClusterRequest;
export declare type DeleteClusterCommandOutput = DeleteClusterResponse & __MetadataBearer;
/**
 * <p>Deletes the specified cluster. The cluster will transition to the
 * 				<code>INACTIVE</code> state. Clusters with an <code>INACTIVE</code> status may
 * 			remain discoverable in your account for a period of time. However, this behavior is
 * 			subject to change in the future, so you should not rely on <code>INACTIVE</code>
 * 			clusters persisting.</p>
 * 		       <p>You must deregister all container instances from this cluster before you may delete
 * 			it. You can list the container instances in a cluster with <a>ListContainerInstances</a> and deregister them with <a>DeregisterContainerInstance</a>.</p>
 */
export declare class DeleteClusterCommand extends $Command<DeleteClusterCommandInput, DeleteClusterCommandOutput, ECSClientResolvedConfig> {
    readonly input: DeleteClusterCommandInput;
    constructor(input: DeleteClusterCommandInput);
    /**
     * @internal
     */
    resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ECSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteClusterCommandInput, DeleteClusterCommandOutput>;
    private serialize;
    private deserialize;
}
